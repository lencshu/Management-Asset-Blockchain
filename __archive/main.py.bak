from fastapi import FastAPI, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

from _lib.eth import Eth
from _lib.btc import Btc
from _lib.usdt import Usdt
from _lib.coin import Coin
from _lib.sql import Sql
from _lib.log import Log
from _lib.config import Order
from _lib import *

app = FastAPI(docs_url="/api/docs", redoc_url="/api/redoc",template_directory='dists')
# app = FastAPI(openapi_prefix="/api",docs_url="/api/docs", redoc_url="/api/redoc")
app.mount("/static/fonts", StaticFiles(directory="dists/static/fonts"), name="fonts")
app.mount("/static/js", StaticFiles(directory="dists/static/js"), name="js")
app.mount("/static/css", StaticFiles(directory="dists/static/css"), name="js")

queue = Queue(1000)
log = Log(queue)

sqlObj = Sql(queue)
btcObj = Btc(log)

processList = []
processList.append((True, sqlObj, Sql, queue))
processList.append((True, btcObj, Btc, log))
logData=[]

async def readSql(tableName):
    global logData
    query=f"SELECT * FROM {tableName}"
    async with aiosqlite.connect(Cfg.PATH_SQLLITE) as db:
        async with db.execute(query) as cursor:
            logData = await cursor.fetchall()

async def stopProcess(processList, orderP=None):
    if orderP:
        orderP = orderP.upper()
    for iProcess in range(len(processList)):
        flagActive, processObj, className, classArg = processList[iProcess]
        print(f"{processObj._name} alive? {processObj.is_alive()}")
        if not orderP or iProcess == Order[orderP].value:
            try:
                if processObj.is_alive():
                    if iProcess == Order["SQL"].value:
                        print(f"killing precess {orderP}")
                        processObj.terminate()
                    else:
                        print(f"waiting precess {orderP}")
                        processObj.join()
            except Exception as e:
                print(e)
            processList[iProcess] = (False, processObj, className, classArg)
    return f"Process {orderP} terminated and disabled"


async def startProcess(processObj, className, classArg):
    try:
        print(f"{processObj._name}: {processObj.is_alive()}")
    except Exception:
        processObj.daemon = True
        processObj.start()
        print("Process init")
    if not processObj.is_alive():
        print("starting processObj")
        processObj = className(classArg)
        processObj.daemon = True
        processObj.start()
    print(f"{processObj._name}: {processObj.is_alive()}")
    return {processObj._name: processObj.is_alive()}, (True, processObj, className, classArg)


@app.get("/")
async def index():
    return FileResponse("./dists/index.html")

@app.get("/api/")
async def root():
    return {"message": "Hello World"}

@app.get("/api/read/{tableName}")
async def read(tableName,background_tasks: BackgroundTasks):
    # background_tasks.add_task(readSql,tableName)
    await readSql(tableName)
    return {"result":logData}

@app.get("/api/readclass/{tableName}")
async def readClass(tableName,background_tasks: BackgroundTasks):
    # background_tasks.add_task(readSql,tableName)
    await readSql(tableName)
    dictData={}
    for iList in logData:
        try:
            dictData[iList[1]][iList[0]]=[iList[2],iList[3],iList[4]]
        except:
            dictData[iList[1]]={}
            dictData[iList[1]][iList[0]]=[iList[2],iList[3],iList[4]]
    # dictData={{iList[1]:{iList[0]:[iList[2],iList[3],iList[4]]}} for iList in logData}
    return {"result":dictData}


@app.get("/api/start")
async def start(background_tasks: BackgroundTasks):
    resp = []
    for iProcess in range(len(processList)):
        flagActive, processObj, className, classArg = processList[iProcess]
        status = f"{processObj._name} is not actived"
        if flagActive:
            status, processList[iProcess] = await startProcess(processObj, className, classArg)
        resp.append(status)
    return resp


@app.get("/api/stop/{processName}")
async def stop(processName):
    if processName.lower() not in ["sql", "btc", "eth", "asset", "usdt"]:
        processName = None
    resp = await stopProcess(processList, processName)
    status = [{item[1]._name:item[0]} for item in processList]
    return {"result": resp,"status":status}


# # ethObj = Eth()


# usdtObj = Usdt()
# coinObj = Coin("Coin")

# usdtObj.start()
# ethObj.start()
# coinObj.start()

# usdtObj.join()
# btcObj.join()
# ethObj.join()


# print(Cfg.__dict__)
# print(str(os.getpid()))
